type AddDissolveDelayArgs = record {
  dissolve_delay_seconds : nat64;
  subaccount : blob;
};
type ApiError = record {
  tag : opt text;
  source : opt text;
  info : opt vec text;
  method_name : opt text;
  message : text;
  timestamp : nat64;
  error_type : ApiErrorType;
};
type ApiErrorType = variant {
  Duplicate;
  SerializeError;
  DeserializeError;
  PayloadTooLarge;
  NotFound;
  Deprecated;
  ValidationError : vec ValidationResponse;
  Unsupported;
  Unauthorized;
  ServiceUnavailable;
  Unexpected;
  NotImplemented;
  ExternalServiceError;
  Forbidden;
  BadRequest;
  Conflict;
};
type AutoStakeArgs = record { subaccount : blob; auto_stake : bool };
type BallotInfo = record { vote : int32; proposal_id : opt NeuronId };
type ClaimOrRefreshResponse = record { refreshed_neuron_id : opt NeuronId };
type Command1 = variant {
  Error : GovernanceError;
  Spawn : SpawnResponse;
  Split : SpawnResponse;
  Follow : record {};
  DisburseMaturity : DisburseMaturityResponse;
  RefreshVotingPower : record {};
  ClaimOrRefresh : ClaimOrRefreshResponse;
  Configure : record {};
  RegisterVote : record {};
  Merge : MergeResponse;
  DisburseToNeuron : SpawnResponse;
  MakeProposal : MakeProposalResponse;
  StakeMaturity : StakeMaturityResponse;
  MergeMaturity : MergeMaturityResponse;
  Disburse : DisburseResponse;
};
type Config = record {
  sns_ledger_canister_id : principal;
  governance_canister_id : principal;
};
type CreateNeuronArgs = record {
  dissolve_delay_seconds : opt nat64;
  amount_e8s : nat64;
  auto_stake : opt bool;
};
type DisburseMaturityResponse = record { amount_disbursed_e8s : opt nat64 };
type DisburseResponse = record { transfer_block_height : nat64 };
type DissolveState = variant {
  DissolveDelaySeconds : nat64;
  WhenDissolvedTimestampSeconds : nat64;
};
type Followees = record { followees : vec NeuronId };
type GovernanceError = record { error_message : text; error_type : int32 };
type IcpNeuronArgs = variant {
  AutoStake : AutoStakeArgs;
  AddDissolveDelay : AddDissolveDelayArgs;
  SetDissolveState : SetDissolveStateArgs;
  TopUp : TopUpNeuronArgs;
  Create : CreateNeuronArgs;
};
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type KnownNeuronData = record { name : text; description : opt text };
type MakeProposalResponse = record {
  message : opt text;
  proposal_id : opt NeuronId;
};
type ManageNeuronResponse = record { command : opt Command1 };
type MergeMaturityResponse = record {
  merged_maturity_e8s : nat64;
  new_stake_e8s : nat64;
};
type MergeResponse = record {
  target_neuron : opt Neuron;
  source_neuron : opt Neuron;
  target_neuron_info : opt NeuronInfo;
  source_neuron_info : opt NeuronInfo;
};
type Module = variant { TreasuryManagement : TreasuryManagementModuleType };
type ModuleResponse = variant {
  Boolean : bool;
  BlockHeight : nat64;
  Neuron : NeuronReferenceResponse;
  ManageNeuronResponse : ManageNeuronResponse;
};
type Neuron = record {
  id : opt NeuronId;
  staked_maturity_e8s_equivalent : opt nat64;
  controller : opt principal;
  recent_ballots : vec BallotInfo;
  voting_power_refreshed_timestamp_seconds : opt nat64;
  kyc_verified : bool;
  potential_voting_power : opt nat64;
  neuron_type : opt int32;
  not_for_profit : bool;
  maturity_e8s_equivalent : nat64;
  deciding_voting_power : opt nat64;
  cached_neuron_stake_e8s : nat64;
  created_timestamp_seconds : nat64;
  auto_stake_maturity : opt bool;
  aging_since_timestamp_seconds : nat64;
  hot_keys : vec principal;
  account : blob;
  joined_community_fund_timestamp_seconds : opt nat64;
  dissolve_state : opt DissolveState;
  followees : vec record { int32; Followees };
  neuron_fees_e8s : nat64;
  visibility : opt int32;
  transfer : opt NeuronStakeTransfer;
  known_neuron_data : opt KnownNeuronData;
  spawn_at_timestamp_seconds : opt nat64;
};
type NeuronId = record { id : nat64 };
type NeuronInfo = record {
  dissolve_delay_seconds : nat64;
  recent_ballots : vec BallotInfo;
  voting_power_refreshed_timestamp_seconds : opt nat64;
  potential_voting_power : opt nat64;
  neuron_type : opt int32;
  deciding_voting_power : opt nat64;
  created_timestamp_seconds : nat64;
  state : int32;
  stake_e8s : nat64;
  joined_community_fund_timestamp_seconds : opt nat64;
  retrieved_at_timestamp_seconds : nat64;
  visibility : opt int32;
  known_neuron_data : opt KnownNeuronData;
  voting_power : nat64;
  age_seconds : nat64;
};
type NeuronReferenceResponse = record {
  subaccount : blob;
  blockheight : nat64;
  nonce : nat64;
  storage_reference_id : nat64;
  neuron_id : opt nat64;
};
type NeuronStakeTransfer = record {
  to_subaccount : blob;
  neuron_stake_e8s : nat64;
  from : opt principal;
  memo : nat64;
  from_subaccount : blob;
  transfer_timestamp : nat64;
  block_height : nat64;
};
type NeuronType = variant { Icp : IcpNeuronArgs };
type Result = variant { Ok : nat64; Err : ApiError };
type Result_1 = variant { Ok : Config; Err : ApiError };
type Result_2 = variant { Ok : Neuron; Err : ApiError };
type Result_3 = variant { Ok : vec NeuronReferenceResponse; Err : ApiError };
type Result_4 = variant { Ok : ModuleResponse; Err : ApiError };
type Result_5 = variant { Ok : text; Err : text };
type SetDissolveStateArgs = record {
  start_dissolving : bool;
  subaccount : blob;
};
type SpawnResponse = record { created_neuron_id : opt NeuronId };
type StakeMaturityResponse = record {
  maturity_e8s : nat64;
  staked_maturity_e8s : nat64;
};
type SupportedStandard = record { url : text; name : text };
type TopUpNeuronArgs = record { subaccount : blob; amount_e8s : nat64 };
type TreasuryManagementModuleType = variant { Neuron : NeuronType };
type ValidationResponse = record { field : text; message : text };
service : (Config) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  get_canister_icp_balance : () -> (Result);
  get_config : () -> (Result_1) query;
  get_full_neuron : (blob) -> (Result_2);
  get_logs : () -> (vec text) query;
  get_neuron_references : () -> (Result_3) query;
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse) query;
  icts_description : () -> (text) query;
  icts_name : () -> (text) query;
  icts_version : () -> (text) query;
  set_module : (Module) -> (Result_4);
  validate_set_module : (Module) -> (Result_5);
}