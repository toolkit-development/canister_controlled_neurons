type Account = record { owner : opt principal; subaccount : opt blob };
type AccountIdentifier = record { hash : blob };
type Account_1 = record { owner : principal; subaccount : opt blob };
type Action = variant {
  ManageNervousSystemParameters : NervousSystemParameters;
  AddGenericNervousSystemFunction : NervousSystemFunction;
  ManageDappCanisterSettings : ManageDappCanisterSettings;
  RemoveGenericNervousSystemFunction : nat64;
  SetTopicsForCustomProposals : SetTopicsForCustomProposals;
  UpgradeSnsToNextVersion : record {};
  RegisterDappCanisters : RegisterDappCanisters;
  TransferSnsTreasuryFunds : TransferSnsTreasuryFunds;
  UpgradeSnsControlledCanister : UpgradeSnsControlledCanister;
  DeregisterDappCanisters : DeregisterDappCanisters;
  MintSnsTokens : MintSnsTokens;
  AdvanceSnsTargetVersion : AdvanceSnsTargetVersion;
  Unspecified : record {};
  ManageSnsMetadata : ManageSnsMetadata;
  ExecuteGenericNervousSystemFunction : ExecuteGenericNervousSystemFunction;
  ManageLedgerParameters : ManageLedgerParameters;
  Motion : Motion;
};
type AddHotKey = record { new_hot_key : opt principal };
type AddIcpNeuronDissolveDelayArgs = record {
  dissolve_delay_seconds : nat64;
  identifier : IcpNeuronIdentifier;
};
type AddOrRemoveNodeProvider = record { change : opt Change };
type AddSnsNeuronDissolveDelayArgs = record {
  dissolve_delay_seconds : nat64;
  neuron_id : blob;
};
type AdvanceSnsTargetVersion = record { new_target : opt SnsVersion };
type Amount = record { e8s : nat64 };
type ApiError = record {
  tag : opt text;
  source : opt text;
  info : opt vec text;
  method_name : opt text;
  message : text;
  timestamp : nat64;
  error_type : ApiErrorType;
};
type ApiErrorType = variant {
  Duplicate;
  SerializeError;
  DeserializeError;
  PayloadTooLarge;
  NotFound;
  Deprecated;
  ValidationError : vec ValidationResponse;
  Unsupported;
  Unauthorized;
  ServiceUnavailable;
  Unexpected;
  NotImplemented;
  ExternalServiceError;
  Forbidden;
  BadRequest;
  Conflict;
};
type AutoStakeIcpNeuronArgs = record {
  auto_stake : bool;
  identifier : IcpNeuronIdentifier;
};
type AutoStakeSnsNeuronArgs = record { auto_stake : bool; neuron_id : blob };
type BallotInfo = record { vote : int32; proposal_id : opt NeuronId_1 };
type By = variant {
  NeuronIdOrSubaccount : record {};
  MemoAndController : ClaimOrRefreshNeuronFromAccount;
  Memo : nat64;
};
type Canister = record { id : opt principal };
type CanisterSettings = record {
  freezing_threshold : opt nat64;
  wasm_memory_threshold : opt nat64;
  controllers : opt Controllers;
  log_visibility : opt int32;
  wasm_memory_limit : opt nat64;
  memory_allocation : opt nat64;
  compute_allocation : opt nat64;
};
type Change = variant { ToRemove : NodeProvider; ToAdd : NodeProvider };
type ChangeAutoStakeMaturity = record {
  requested_setting_for_auto_stake_maturity : bool;
};
type ChunkedCanisterWasm = record {
  wasm_module_hash : blob;
  chunk_hashes_list : vec blob;
  store_canister_id : opt principal;
};
type ClaimOrRefresh = record { by : opt By };
type ClaimOrRefreshNeuronFromAccount = record {
  controller : opt principal;
  memo : nat64;
};
type ClaimOrRefreshResponse = record { refreshed_neuron_id : opt NeuronId_1 };
type Command1 = variant {
  Error : GovernanceError;
  Spawn : SpawnResponse;
  Split : SpawnResponse;
  Follow : record {};
  DisburseMaturity : DisburseMaturityResponse;
  RefreshVotingPower : record {};
  ClaimOrRefresh : ClaimOrRefreshResponse;
  Configure : record {};
  RegisterVote : record {};
  Merge : MergeResponse;
  DisburseToNeuron : SpawnResponse;
  MakeProposal : MakeProposalResponse;
  StakeMaturity : StakeMaturityResponse;
  MergeMaturity : MergeMaturityResponse;
  Disburse : DisburseResponse;
};
type Config = record {
  sns_ledger_canister_id : principal;
  governance_canister_id : principal;
};
type Configure = record { operation : opt Operation };
type Controllers = record { controllers : vec principal };
type Countries = record { iso_codes : vec text };
type CreateIcpNeuronArgs = record {
  dissolve_delay_seconds : opt nat64;
  amount_e8s : nat64;
  auto_stake : opt bool;
};
type CreateIcpNeuronProposalArgs = record {
  proposal : MakeProposalRequest;
  identifier : IcpNeuronIdentifier;
};
type CreateServiceNervousSystem = record {
  url : opt text;
  governance_parameters : opt GovernanceParameters;
  fallback_controller_principal_ids : vec principal;
  logo : opt Image;
  name : opt text;
  ledger_parameters : opt LedgerParameters;
  description : opt text;
  dapp_canisters : vec Canister;
  swap_parameters : opt SwapParameters;
  initial_token_distribution : opt InitialTokenDistribution;
};
type CreateSnsNeuronProposalArgs = record {
  proposal : Proposal;
  neuron_id : blob;
};
type Decimal = record { human_readable : opt text };
type DefaultFollowees = record { followees : vec record { nat64; Followees } };
type DeregisterDappCanisters = record {
  canister_ids : vec principal;
  new_controllers : vec principal;
};
type DeveloperDistribution = record {
  developer_neurons : vec NeuronDistribution;
};
type Disburse = record {
  to_account : opt AccountIdentifier;
  amount : opt Amount;
};
type DisburseIcpNeuronArgs = record { identifier : IcpNeuronIdentifier };
type DisburseMaturity = record {
  to_account : opt Account;
  percentage_to_disburse : nat32;
};
type DisburseMaturityResponse = record { amount_disbursed_e8s : opt nat64 };
type DisburseResponse = record { transfer_block_height : nat64 };
type DisburseSnsNeuronArgs = record { neuron_id : blob };
type DisburseToNeuron = record {
  dissolve_delay_seconds : nat64;
  kyc_verified : bool;
  amount_e8s : nat64;
  new_controller : opt principal;
  nonce : nat64;
};
type DissolveState = variant {
  DissolveDelaySeconds : nat64;
  WhenDissolvedTimestampSeconds : nat64;
};
type Duration = record { seconds : opt nat64 };
type ExecuteGenericNervousSystemFunction = record {
  function_id : nat64;
  payload : blob;
};
type ExecuteNnsFunction = record { nns_function : int32; payload : blob };
type Follow = record { topic : int32; followees : vec NeuronId_1 };
type Followees = record { followees : vec NeuronId };
type Followees_1 = record { followees : vec NeuronId_1 };
type FunctionType = variant {
  NativeNervousSystemFunction : record {};
  GenericNervousSystemFunction : GenericNervousSystemFunction;
};
type GenericNervousSystemFunction = record {
  topic : opt Topic;
  validator_canister_id : opt principal;
  target_canister_id : opt principal;
  validator_method_name : opt text;
  target_method_name : opt text;
};
type GetProposal = record { proposal_id : opt NeuronId_1 };
type GlobalTimeOfDay = record { seconds_after_utc_midnight : opt nat64 };
type GovernanceError = record { error_message : text; error_type : int32 };
type GovernanceParameters = record {
  neuron_maximum_dissolve_delay_bonus : opt Percentage;
  neuron_maximum_age_for_age_bonus : opt Duration;
  neuron_maximum_dissolve_delay : opt Duration;
  neuron_minimum_dissolve_delay_to_vote : opt Duration;
  neuron_maximum_age_bonus : opt Percentage;
  neuron_minimum_stake : opt Tokens;
  proposal_wait_for_quiet_deadline_increase : opt Duration;
  proposal_initial_voting_period : opt Duration;
  proposal_rejection_fee : opt Tokens;
  voting_reward_parameters : opt VotingRewardParameters;
};
type IcpNeuronArgs = variant {
  AutoStake : AutoStakeIcpNeuronArgs;
  Spawn : SpawnIcpNeuronArgs;
  AddDissolveDelay : AddIcpNeuronDissolveDelayArgs;
  Vote : VoteIcpNeuronArgs;
  SetDissolveState : SpawnIcpNeuronArgs;
  TopUp : TopUpIcpNeuronArgs;
  CreateProposal : CreateIcpNeuronProposalArgs;
  Create : CreateIcpNeuronArgs;
  SetFollowing : SetIcpNeuronFollowingArgs;
  Disburse : DisburseIcpNeuronArgs;
};
type IcpNeuronFollowingArgs = record { topic : Topic_1; followees : vec nat64 };
type IcpNeuronIdentifier = variant { Subaccount : blob; NeuronId : nat64 };
type IcpNeuronReferenceResponse = record {
  subaccount : blob;
  blockheight : nat64;
  topup_account : Account;
  nonce : nat64;
  storage_reference_id : nat64;
  parent_subaccount : opt blob;
  neuron_id : opt nat64;
};
type IcpNeuronVote = variant { Approve; Reject };
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type Image = record { base64_encoding : opt text };
type IncreaseDissolveDelay = record {
  additional_dissolve_delay_seconds : nat32;
};
type InitialTokenDistribution = record {
  treasury_distribution : opt SwapDistribution;
  developer_distribution : opt DeveloperDistribution;
  swap_distribution : opt SwapDistribution;
};
type InstallCodeRequest = record {
  arg : opt blob;
  wasm_module : opt blob;
  skip_stopping_before_installing : opt bool;
  canister_id : opt principal;
  install_mode : opt int32;
};
type KnownNeuron = record {
  id : opt NeuronId_1;
  known_neuron_data : opt KnownNeuronData;
};
type KnownNeuronData = record { name : text; description : opt text };
type LedgerParameters = record {
  transaction_fee : opt Tokens;
  token_symbol : opt text;
  token_logo : opt Image;
  token_name : opt text;
};
type MakeProposalRequest = record {
  url : text;
  title : opt text;
  action : opt ProposalActionRequest;
  summary : text;
};
type MakeProposalResponse = record {
  message : opt text;
  proposal_id : opt NeuronId_1;
};
type ManageDappCanisterSettings = record {
  freezing_threshold : opt nat64;
  wasm_memory_threshold : opt nat64;
  canister_ids : vec principal;
  reserved_cycles_limit : opt nat64;
  log_visibility : opt int32;
  wasm_memory_limit : opt nat64;
  memory_allocation : opt nat64;
  compute_allocation : opt nat64;
};
type ManageLedgerParameters = record {
  token_symbol : opt text;
  transfer_fee : opt nat64;
  token_logo : opt text;
  token_name : opt text;
};
type ManageNeuronCommandRequest = variant {
  Spawn : Spawn;
  Split : Split;
  Follow : Follow;
  DisburseMaturity : DisburseMaturity;
  RefreshVotingPower : record {};
  ClaimOrRefresh : ClaimOrRefresh;
  Configure : Configure;
  RegisterVote : RegisterVote;
  Merge : Merge;
  DisburseToNeuron : DisburseToNeuron;
  MakeProposal : MakeProposalRequest;
  StakeMaturity : StakeMaturity;
  MergeMaturity : MergeMaturity;
  Disburse : Disburse;
};
type ManageNeuronRequest = record {
  id : opt NeuronId_1;
  command : opt ManageNeuronCommandRequest;
  neuron_id_or_subaccount : opt NeuronIdOrSubaccount;
};
type ManageNeuronResponse = record { command : opt Command1 };
type ManageSnsMetadata = record {
  url : opt text;
  logo : opt text;
  name : opt text;
  description : opt text;
};
type Merge = record { source_neuron_id : opt NeuronId_1 };
type MergeMaturity = record { percentage_to_merge : nat32 };
type MergeMaturityResponse = record {
  merged_maturity_e8s : nat64;
  new_stake_e8s : nat64;
};
type MergeResponse = record {
  target_neuron : opt Neuron;
  source_neuron : opt Neuron;
  target_neuron_info : opt NeuronInfo;
  source_neuron_info : opt NeuronInfo;
};
type MintSnsTokens = record {
  to_principal : opt principal;
  to_subaccount : opt Subaccount;
  memo : opt nat64;
  amount_e8s : opt nat64;
};
type ModuleResponse = variant {
  IcpNeuron : IcpNeuronReferenceResponse;
  GetProposalResponse : GetProposal;
  SnsNeuron : SnsNeuronReferenceResponse;
  Boolean : bool;
  MakeProposalResponse : MakeProposalResponse;
  BlockHeight : nat64;
  ManageNeuronResponse : ManageNeuronResponse;
};
type Motion = record { motion_text : text };
type NervousSystemFunction = record {
  id : nat64;
  name : text;
  description : opt text;
  function_type : opt FunctionType;
};
type NervousSystemParameters = record {
  default_followees : opt DefaultFollowees;
  max_dissolve_delay_seconds : opt nat64;
  max_dissolve_delay_bonus_percentage : opt nat64;
  max_followees_per_function : opt nat64;
  automatically_advance_target_version : opt bool;
  neuron_claimer_permissions : opt NeuronPermissionList;
  neuron_minimum_stake_e8s : opt nat64;
  max_neuron_age_for_age_bonus : opt nat64;
  initial_voting_period_seconds : opt nat64;
  neuron_minimum_dissolve_delay_to_vote_seconds : opt nat64;
  reject_cost_e8s : opt nat64;
  max_proposals_to_keep_per_action : opt nat32;
  wait_for_quiet_deadline_increase_seconds : opt nat64;
  max_number_of_neurons : opt nat64;
  transaction_fee_e8s : opt nat64;
  max_number_of_proposals_with_ballots : opt nat64;
  max_age_bonus_percentage : opt nat64;
  neuron_grantable_permissions : opt NeuronPermissionList;
  voting_rewards_parameters : opt VotingRewardsParameters;
  maturity_modulation_disabled : opt bool;
  max_number_of_principals_per_neuron : opt nat64;
};
type NetworkEconomics = record {
  neuron_minimum_stake_e8s : nat64;
  voting_power_economics : opt VotingPowerEconomics;
  max_proposals_to_keep_per_topic : nat32;
  neuron_management_fee_per_proposal_e8s : nat64;
  reject_cost_e8s : nat64;
  transaction_fee_e8s : nat64;
  neuron_spawn_dissolve_delay_seconds : nat64;
  minimum_icp_xdr_rate : nat64;
  maximum_node_provider_rewards_e8s : nat64;
  neurons_fund_economics : opt NeuronsFundEconomics;
};
type Neuron = record {
  id : opt NeuronId_1;
  staked_maturity_e8s_equivalent : opt nat64;
  controller : opt principal;
  recent_ballots : vec BallotInfo;
  voting_power_refreshed_timestamp_seconds : opt nat64;
  kyc_verified : bool;
  potential_voting_power : opt nat64;
  neuron_type : opt int32;
  not_for_profit : bool;
  maturity_e8s_equivalent : nat64;
  deciding_voting_power : opt nat64;
  cached_neuron_stake_e8s : nat64;
  created_timestamp_seconds : nat64;
  auto_stake_maturity : opt bool;
  aging_since_timestamp_seconds : nat64;
  hot_keys : vec principal;
  account : blob;
  joined_community_fund_timestamp_seconds : opt nat64;
  dissolve_state : opt DissolveState;
  followees : vec record { int32; Followees_1 };
  neuron_fees_e8s : nat64;
  visibility : opt int32;
  transfer : opt NeuronStakeTransfer;
  known_neuron_data : opt KnownNeuronData;
  spawn_at_timestamp_seconds : opt nat64;
};
type NeuronBasketConstructionParameters = record {
  dissolve_delay_interval : opt Duration;
  count : opt nat64;
};
type NeuronDistribution = record {
  controller : opt principal;
  dissolve_delay : opt Duration;
  memo : opt nat64;
  vesting_period : opt Duration;
  stake : opt Tokens;
};
type NeuronId = record { id : blob };
type NeuronIdOrSubaccount = variant {
  Subaccount : blob;
  NeuronId : NeuronId_1;
};
type NeuronId_1 = record { id : nat64 };
type NeuronInfo = record {
  dissolve_delay_seconds : nat64;
  recent_ballots : vec BallotInfo;
  voting_power_refreshed_timestamp_seconds : opt nat64;
  potential_voting_power : opt nat64;
  neuron_type : opt int32;
  deciding_voting_power : opt nat64;
  created_timestamp_seconds : nat64;
  state : int32;
  stake_e8s : nat64;
  joined_community_fund_timestamp_seconds : opt nat64;
  retrieved_at_timestamp_seconds : nat64;
  visibility : opt int32;
  known_neuron_data : opt KnownNeuronData;
  voting_power : nat64;
  age_seconds : nat64;
};
type NeuronPermissionList = record { permissions : vec int32 };
type NeuronStakeTransfer = record {
  to_subaccount : blob;
  neuron_stake_e8s : nat64;
  from : opt principal;
  memo : nat64;
  from_subaccount : blob;
  transfer_timestamp : nat64;
  block_height : nat64;
};
type NeuronType = variant { Icp : IcpNeuronArgs; Sns : SnsNeuronArgs };
type NeuronsFundEconomics = record {
  maximum_icp_xdr_rate : opt Percentage;
  neurons_fund_matched_funding_curve_coefficients : opt NeuronsFundMatchedFundingCurveCoefficients;
  max_theoretical_neurons_fund_participation_amount_xdr : opt Decimal;
  minimum_icp_xdr_rate : opt Percentage;
};
type NeuronsFundMatchedFundingCurveCoefficients = record {
  contribution_threshold_xdr : opt Decimal;
  one_third_participation_milestone_xdr : opt Decimal;
  full_participation_milestone_xdr : opt Decimal;
};
type NodeProvider = record {
  id : opt principal;
  reward_account : opt AccountIdentifier;
};
type Operation = variant {
  RemoveHotKey : RemoveHotKey;
  AddHotKey : AddHotKey;
  ChangeAutoStakeMaturity : ChangeAutoStakeMaturity;
  StopDissolving : record {};
  StartDissolving : record {};
  IncreaseDissolveDelay : IncreaseDissolveDelay;
  SetVisibility : SetVisibility;
  JoinCommunityFund : record {};
  LeaveCommunityFund : record {};
  SetDissolveTimestamp : SetDissolveTimestamp;
};
type Percentage = record { basis_points : opt nat64 };
type PostSnsChainProposal = record { proposal : Proposal; index : nat64 };
type Principals = record { principals : vec principal };
type Proposal = record {
  url : text;
  title : text;
  action : opt Action;
  summary : text;
};
type ProposalActionRequest = variant {
  RegisterKnownNeuron : KnownNeuron;
  ManageNeuron : ManageNeuronRequest;
  UpdateCanisterSettings : UpdateCanisterSettings;
  InstallCode : InstallCodeRequest;
  StopOrStartCanister : StopOrStartCanister;
  CreateServiceNervousSystem : CreateServiceNervousSystem;
  ExecuteNnsFunction : ExecuteNnsFunction;
  RewardNodeProvider : RewardNodeProvider;
  RewardNodeProviders : RewardNodeProviders;
  ManageNetworkEconomics : NetworkEconomics;
  ApproveGenesisKyc : Principals;
  AddOrRemoveNodeProvider : AddOrRemoveNodeProvider;
  Motion : Motion;
};
type RegisterDappCanisters = record { canister_ids : vec principal };
type RegisterVote = record { vote : int32; proposal : opt NeuronId_1 };
type RemoveHotKey = record { hot_key_to_remove : opt principal };
type Result = variant { Ok : SnsChainProposalsResponse; Err : ApiError };
type Result_1 = variant { Ok : Config; Err : ApiError };
type Result_2 = variant { Ok : Neuron; Err : ApiError };
type Result_3 = variant { Ok : vec IcpNeuronReferenceResponse; Err : ApiError };
type Result_4 = variant { Ok : vec SnsNeuronReferenceResponse; Err : ApiError };
type Result_5 = variant { Ok : ModuleResponse; Err : ApiError };
type Result_6 = variant { Ok : text; Err : text };
type RewardMode = variant {
  RewardToNeuron : RewardToNeuron;
  RewardToAccount : RewardToAccount;
};
type RewardNodeProvider = record {
  node_provider : opt NodeProvider;
  reward_mode : opt RewardMode;
  amount_e8s : nat64;
};
type RewardNodeProviders = record {
  use_registry_derived_rewards : opt bool;
  rewards : vec RewardNodeProvider;
};
type RewardToAccount = record { to_account : opt AccountIdentifier };
type RewardToNeuron = record { dissolve_delay_seconds : nat64 };
type SetDissolveTimestamp = record { dissolve_timestamp_seconds : nat64 };
type SetIcpNeuronFollowingArgs = record {
  following : vec IcpNeuronFollowingArgs;
  identifier : IcpNeuronIdentifier;
};
type SetSnsNeuronFollowingArgs = record {
  following : vec SnsNeuronFollowingArgs;
  neuron_id : blob;
};
type SetTopicsForCustomProposals = record {
  custom_function_id_to_topic : vec record { nat64; Topic };
};
type SetVisibility = record { visibility : opt int32 };
type SnsChainProposalResponse = record {
  proposal_id : opt nat64;
  proposal : Proposal;
  index : nat64;
};
type SnsChainProposalsResponse = record {
  id : nat64;
  active_proposal_id : opt nat64;
  current_index : nat64;
  proposals : vec SnsChainProposalResponse;
  neuron_id : blob;
};
type SnsNeuronArgs = variant {
  AutoStake : AutoStakeSnsNeuronArgs;
  Spawn : SpawnSnsNeuronArgs;
  AddDissolveDelay : AddSnsNeuronDissolveDelayArgs;
  Vote : VoteSnsNeuronArgs;
  SetDissolveState : SpawnSnsNeuronArgs;
  TopUp : TopUpSnsNeuronArgs;
  CreateProposal : CreateSnsNeuronProposalArgs;
  Create : CreateIcpNeuronArgs;
  SetFollowing : SetSnsNeuronFollowingArgs;
  Disburse : DisburseSnsNeuronArgs;
};
type SnsNeuronFollowingArgs = record { topic : Topic; followees : vec blob };
type SnsNeuronReferenceResponse = record {
  subaccount : blob;
  blockheight : nat;
  topup_account : Account_1;
  nonce : nat64;
  storage_reference_id : nat64;
  parent_subaccount : opt blob;
  neuron_id : opt blob;
};
type SnsVersion = record {
  archive_wasm_hash : opt blob;
  root_wasm_hash : opt blob;
  swap_wasm_hash : opt blob;
  ledger_wasm_hash : opt blob;
  governance_wasm_hash : opt blob;
  index_wasm_hash : opt blob;
};
type Spawn = record {
  percentage_to_spawn : opt nat32;
  new_controller : opt principal;
  nonce : opt nat64;
};
type SpawnIcpNeuronArgs = record {
  start_dissolving : bool;
  identifier : IcpNeuronIdentifier;
};
type SpawnResponse = record { created_neuron_id : opt NeuronId_1 };
type SpawnSnsNeuronArgs = record { start_dissolving : bool; neuron_id : blob };
type Split = record { amount_e8s : nat64 };
type StakeMaturity = record { percentage_to_stake : opt nat32 };
type StakeMaturityResponse = record {
  maturity_e8s : nat64;
  staked_maturity_e8s : nat64;
};
type StopOrStartCanister = record {
  action : opt int32;
  canister_id : opt principal;
};
type Subaccount = record { subaccount : blob };
type SupportedStandard = record { url : text; name : text };
type SwapDistribution = record { total : opt Tokens };
type SwapParameters = record {
  minimum_participants : opt nat64;
  neurons_fund_participation : opt bool;
  duration : opt Duration;
  neuron_basket_construction_parameters : opt NeuronBasketConstructionParameters;
  confirmation_text : opt text;
  maximum_participant_icp : opt Tokens;
  minimum_icp : opt Tokens;
  minimum_direct_participation_icp : opt Tokens;
  minimum_participant_icp : opt Tokens;
  start_time : opt GlobalTimeOfDay;
  maximum_direct_participation_icp : opt Tokens;
  maximum_icp : opt Tokens;
  neurons_fund_investment_icp : opt Tokens;
  restricted_countries : opt Countries;
};
type Tokens = record { e8s : opt nat64 };
type TopUpIcpNeuronArgs = record {
  amount_e8s : nat64;
  identifier : IcpNeuronIdentifier;
};
type TopUpSnsNeuronArgs = record { amount_e8s : nat64; neuron_id : blob };
type Topic = variant {
  DappCanisterManagement;
  DaoCommunitySettings;
  ApplicationBusinessLogic;
  CriticalDappOperations;
  TreasuryAssetManagement;
  Governance;
  SnsFrameworkManagement;
};
type Topic_1 = variant {
  Kyc;
  ServiceNervousSystemManagement;
  NetworkCanisterManagement;
  ApiBoundaryNodeManagement;
  SubnetRental;
  NeuronManagement;
  NodeProviderRewards;
  SubnetManagement;
  ExchangeRate;
  NodeAdmin;
  IcOsVersionElection;
  ProtocolCanisterManagement;
  NetworkEconomics;
  IcOsVersionDeployment;
  ParticipantManagement;
  Governance;
  SnsAndCommunityFund;
  Unspecified;
};
type TransferSnsTreasuryFunds = record {
  from_treasury : int32;
  to_principal : opt principal;
  to_subaccount : opt Subaccount;
  memo : opt nat64;
  amount_e8s : nat64;
};
type UpdateCanisterSettings = record {
  canister_id : opt principal;
  settings : opt CanisterSettings;
};
type UpgradeSnsControlledCanister = record {
  new_canister_wasm : blob;
  mode : opt int32;
  canister_id : opt principal;
  chunked_canister_wasm : opt ChunkedCanisterWasm;
  canister_upgrade_arg : opt blob;
};
type ValidationResponse = record { field : text; message : text };
type Value = variant {
  Int : int;
  Map : vec record { text; Value };
  Nat : nat;
  Nat64 : nat64;
  Blob : blob;
  Text : text;
  Array : vec Value;
};
type VoteIcpNeuronArgs = record {
  vote : IcpNeuronVote;
  proposal_id : nat64;
  identifier : IcpNeuronIdentifier;
};
type VoteSnsNeuronArgs = record {
  vote : IcpNeuronVote;
  proposal_id : nat64;
  neuron_id : blob;
};
type VotingPowerEconomics = record {
  start_reducing_voting_power_after_seconds : opt nat64;
  neuron_minimum_dissolve_delay_to_vote_seconds : opt nat64;
  clear_following_after_seconds : opt nat64;
};
type VotingRewardParameters = record {
  reward_rate_transition_duration : opt Duration;
  initial_reward_rate : opt Percentage;
  final_reward_rate : opt Percentage;
};
type VotingRewardsParameters = record {
  final_reward_rate_basis_points : opt nat64;
  initial_reward_rate_basis_points : opt nat64;
  reward_rate_transition_duration_seconds : opt nat64;
  round_duration_seconds : opt nat64;
};
service : (Config) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  create_chain_proposals : (blob, vec PostSnsChainProposal, bool) -> (Result);
  execute_next_proposal : (nat64) -> (Result);
  get_config : () -> (Result_1) query;
  get_full_neuron : (IcpNeuronIdentifier) -> (Result_2);
  get_logs : () -> (vec text) query;
  get_neuron_references : () -> (Result_3) query;
  get_sns_chain_proposals : (nat64) -> (Result) query;
  get_sns_neuron_references : () -> (Result_4) query;
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse) query;
  icts_description : () -> (text) query;
  icts_metadata : () -> (vec record { text; Value }) query;
  icts_name : () -> (text) query;
  icts_version : () -> (text) query;
  start_chain : (nat64) -> (Result);
  test_tk_service_manage_neuron : (NeuronType) -> (Result_5);
  tk_service_manage_neuron : (NeuronType) -> (Result_5);
  tk_service_validate_manage_neuron : (NeuronType) -> (Result_6);
}