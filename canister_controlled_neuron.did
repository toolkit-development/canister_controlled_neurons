type ApiError = record {
  tag : opt text;
  source : opt text;
  info : opt vec text;
  method_name : opt text;
  message : text;
  timestamp : nat64;
  error_type : ApiErrorType;
};
type ApiErrorType = variant {
  Duplicate;
  SerializeError;
  DeserializeError;
  PayloadTooLarge;
  NotFound;
  Deprecated;
  Unsupported;
  Unauthorized;
  ServiceUnavailable;
  Unexpected;
  NotImplemented;
  ExternalServiceError;
  Forbidden;
  BadRequest;
  Conflict;
};
type BallotInfo = record { vote : int32; proposal_id : opt NeuronId };
type DissolveState = variant {
  DissolveDelaySeconds : nat64;
  WhenDissolvedTimestampSeconds : nat64;
};
type Followees = record { followees : vec NeuronId };
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type KnownNeuronData = record { name : text; description : opt text };
type ListNeuronsResponse = record {
  neuron_infos : vec record { nat64; NeuronInfo };
  full_neurons : vec Neuron;
  total_pages_available : opt nat64;
};
type Neuron = record {
  id : opt NeuronId;
  staked_maturity_e8s_equivalent : opt nat64;
  controller : opt principal;
  recent_ballots : vec BallotInfo;
  voting_power_refreshed_timestamp_seconds : opt nat64;
  kyc_verified : bool;
  potential_voting_power : opt nat64;
  neuron_type : opt int32;
  not_for_profit : bool;
  maturity_e8s_equivalent : nat64;
  deciding_voting_power : opt nat64;
  cached_neuron_stake_e8s : nat64;
  created_timestamp_seconds : nat64;
  auto_stake_maturity : opt bool;
  aging_since_timestamp_seconds : nat64;
  hot_keys : vec principal;
  account : blob;
  joined_community_fund_timestamp_seconds : opt nat64;
  dissolve_state : opt DissolveState;
  followees : vec record { int32; Followees };
  neuron_fees_e8s : nat64;
  visibility : opt int32;
  transfer : opt NeuronStakeTransfer;
  known_neuron_data : opt KnownNeuronData;
  spawn_at_timestamp_seconds : opt nat64;
};
type NeuronId = record { id : nat64 };
type NeuronInfo = record {
  dissolve_delay_seconds : nat64;
  recent_ballots : vec BallotInfo;
  voting_power_refreshed_timestamp_seconds : opt nat64;
  potential_voting_power : opt nat64;
  neuron_type : opt int32;
  deciding_voting_power : opt nat64;
  created_timestamp_seconds : nat64;
  state : int32;
  stake_e8s : nat64;
  joined_community_fund_timestamp_seconds : opt nat64;
  retrieved_at_timestamp_seconds : nat64;
  visibility : opt int32;
  known_neuron_data : opt KnownNeuronData;
  voting_power : nat64;
  age_seconds : nat64;
};
type NeuronReferenceResponse = record {
  subaccount : blob;
  blockheight : nat64;
  nonce : nat64;
  storage_reference_id : nat64;
  neuron_id : opt nat64;
};
type NeuronStakeTransfer = record {
  to_subaccount : blob;
  neuron_stake_e8s : nat64;
  from : opt principal;
  memo : nat64;
  from_subaccount : blob;
  transfer_timestamp : nat64;
  block_height : nat64;
};
type ProposalId = record { id : nat64 };
type Result = variant { Ok : NeuronReferenceResponse; Err : ApiError };
type Result_1 = variant { Ok : nat64; Err : ApiError };
type Result_2 = variant { Ok : NeuronInfo; Err : ApiError };
type Result_3 = variant { Ok : vec NeuronReferenceResponse; Err : ApiError };
type Result_4 = variant { Ok : ListNeuronsResponse; Err : ApiError };
type SupportedStandard = record { url : text; name : text };
service : (vec principal) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  claim_or_refresh_neuron : (nat64) -> (Result);
  create_neuron : (nat64) -> (Result);
  get_balance : () -> (Result_1);
  get_neuron_info : (nat64) -> (Result_2);
  get_neurons : () -> (Result_3) query;
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse) query;
  icts_description : () -> (text) query;
  icts_name : () -> (text) query;
  icts_version : () -> (text) query;
  list_neurons : () -> (Result_4);
  top_up_neuron_by_subaccount : (nat64, nat64) -> (Result_1);
}